{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "931dca7d",
   "metadata": {},
   "source": [
    "# Data Loading and Manipulation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6fccf0ae",
   "metadata": {},
   "source": [
    "## Kindly load the las file of F02-1_logs.las well from the data folder\n",
    "## Answer the following questions:\n",
    "\n",
    ">1. How many well logs in the file \n",
    "2. How many data points (observations) in the welllogs.\n",
    "3. Is there any null values? how much (%)/ well-log\n",
    "4. Is there a relationship between DT and RHOB? "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ae3e8e0",
   "metadata": {},
   "source": [
    "### You can use the following liberaries for your assignment:\n",
    "> Numpy, Pandas, Matplotlib, seaborn, LASIO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "13936265",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pandas in c:\\users\\m. el-kashef\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (1.4.3)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\m. el-kashef\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from pandas) (2022.1)\n",
      "Requirement already satisfied: numpy>=1.21.0 in c:\\users\\m. el-kashef\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from pandas) (1.23.0)\n",
      "Requirement already satisfied: python-dateutil>=2.8.1 in c:\\users\\m. el-kashef\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from pandas) (2.8.2)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\m. el-kashef\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from python-dateutil>=2.8.1->pandas) (1.16.0)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: You are using pip version 22.0.4; however, version 22.1.2 is available.\n",
      "You should consider upgrading via the 'C:\\Users\\M. El-Kashef\\AppData\\Local\\Programs\\Python\\Python310\\python.exe -m pip install --upgrade pip' command.\n"
     ]
    }
   ],
   "source": [
    "!pip install pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c3b06733",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: numpy in c:\\users\\m. el-kashef\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (1.23.0)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: You are using pip version 22.0.4; however, version 22.1.2 is available.\n",
      "You should consider upgrading via the 'C:\\Users\\M. El-Kashef\\AppData\\Local\\Programs\\Python\\Python310\\python.exe -m pip install --upgrade pip' command.\n"
     ]
    }
   ],
   "source": [
    "!pip install numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4c96b19d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ERROR: Could not find a version that satisfies the requirement matplotib (from versions: none)\n",
      "ERROR: No matching distribution found for matplotib\n",
      "WARNING: You are using pip version 22.0.4; however, version 22.1.2 is available.\n",
      "You should consider upgrading via the 'C:\\Users\\M. El-Kashef\\AppData\\Local\\Programs\\Python\\Python310\\python.exe -m pip install --upgrade pip' command.\n"
     ]
    }
   ],
   "source": [
    "!pip install matplotib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "12944871",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from IPython.display import display"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "92084342",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DEPTH</th>\n",
       "      <th>RHOB</th>\n",
       "      <th>DT</th>\n",
       "      <th>GR</th>\n",
       "      <th>AI</th>\n",
       "      <th>AI_rel</th>\n",
       "      <th>PHIE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>48.0000</td>\n",
       "      <td>-999.2500</td>\n",
       "      <td>524.0485</td>\n",
       "      <td>-999.2500</td>\n",
       "      <td>3820257.00</td>\n",
       "      <td>-455.6956</td>\n",
       "      <td>-999.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>48.1500</td>\n",
       "      <td>-999.2500</td>\n",
       "      <td>524.0410</td>\n",
       "      <td>-999.2500</td>\n",
       "      <td>3820311.75</td>\n",
       "      <td>-455.6956</td>\n",
       "      <td>-999.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>48.3000</td>\n",
       "      <td>-999.2500</td>\n",
       "      <td>524.0336</td>\n",
       "      <td>-999.2500</td>\n",
       "      <td>3820366.25</td>\n",
       "      <td>-455.6956</td>\n",
       "      <td>-999.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>48.4500</td>\n",
       "      <td>-999.2500</td>\n",
       "      <td>524.0262</td>\n",
       "      <td>-999.2500</td>\n",
       "      <td>3820419.75</td>\n",
       "      <td>-455.6956</td>\n",
       "      <td>-999.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>48.6000</td>\n",
       "      <td>-999.2500</td>\n",
       "      <td>524.0190</td>\n",
       "      <td>-999.2500</td>\n",
       "      <td>3820472.25</td>\n",
       "      <td>-455.6956</td>\n",
       "      <td>-999.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9675</th>\n",
       "      <td>1499.2500</td>\n",
       "      <td>1787.5444</td>\n",
       "      <td>532.1727</td>\n",
       "      <td>27.6273</td>\n",
       "      <td>3359011.00</td>\n",
       "      <td>-239115.9375</td>\n",
       "      <td>-999.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9676</th>\n",
       "      <td>1499.4000</td>\n",
       "      <td>1814.1691</td>\n",
       "      <td>534.8610</td>\n",
       "      <td>28.5281</td>\n",
       "      <td>3391772.00</td>\n",
       "      <td>-239115.9375</td>\n",
       "      <td>-999.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9677</th>\n",
       "      <td>1499.5500</td>\n",
       "      <td>1861.6497</td>\n",
       "      <td>537.1902</td>\n",
       "      <td>28.5813</td>\n",
       "      <td>3465524.00</td>\n",
       "      <td>-239115.9375</td>\n",
       "      <td>-999.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9678</th>\n",
       "      <td>1499.7001</td>\n",
       "      <td>1880.3978</td>\n",
       "      <td>537.2630</td>\n",
       "      <td>28.5813</td>\n",
       "      <td>3499957.75</td>\n",
       "      <td>-239115.9375</td>\n",
       "      <td>-999.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9679</th>\n",
       "      <td>1499.8501</td>\n",
       "      <td>1856.3350</td>\n",
       "      <td>537.3831</td>\n",
       "      <td>27.9759</td>\n",
       "      <td>3454404.00</td>\n",
       "      <td>-212640.7031</td>\n",
       "      <td>-999.25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9680 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          DEPTH       RHOB       DT        GR           AI      AI_rel   \\\n",
       "0       48.0000  -999.2500  524.0485 -999.2500  3820257.00    -455.6956   \n",
       "1       48.1500  -999.2500  524.0410 -999.2500  3820311.75    -455.6956   \n",
       "2       48.3000  -999.2500  524.0336 -999.2500  3820366.25    -455.6956   \n",
       "3       48.4500  -999.2500  524.0262 -999.2500  3820419.75    -455.6956   \n",
       "4       48.6000  -999.2500  524.0190 -999.2500  3820472.25    -455.6956   \n",
       "...         ...        ...       ...       ...         ...          ...   \n",
       "9675  1499.2500  1787.5444  532.1727   27.6273  3359011.00 -239115.9375   \n",
       "9676  1499.4000  1814.1691  534.8610   28.5281  3391772.00 -239115.9375   \n",
       "9677  1499.5500  1861.6497  537.1902   28.5813  3465524.00 -239115.9375   \n",
       "9678  1499.7001  1880.3978  537.2630   28.5813  3499957.75 -239115.9375   \n",
       "9679  1499.8501  1856.3350  537.3831   27.9759  3454404.00 -212640.7031   \n",
       "\n",
       "        PHIE  \n",
       "0    -999.25  \n",
       "1    -999.25  \n",
       "2    -999.25  \n",
       "3    -999.25  \n",
       "4    -999.25  \n",
       "...      ...  \n",
       "9675 -999.25  \n",
       "9676 -999.25  \n",
       "9677 -999.25  \n",
       "9678 -999.25  \n",
       "9679 -999.25  \n",
       "\n",
       "[9680 rows x 7 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = pd.read_csv(r'D:\\Courses\\Data science & Python for Geoscientist\\Data\\10DaysChallenge\\Dutch_F3_Logs\\F02-1_logs.csv',delimiter=',')\n",
    "display(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "c645ff5c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'head : '"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DEPTH</th>\n",
       "      <th>RHOB</th>\n",
       "      <th>DT</th>\n",
       "      <th>GR</th>\n",
       "      <th>AI</th>\n",
       "      <th>AI_rel</th>\n",
       "      <th>PHIE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>48.00</td>\n",
       "      <td>-999.25</td>\n",
       "      <td>524.0485</td>\n",
       "      <td>-999.25</td>\n",
       "      <td>3820257.00</td>\n",
       "      <td>-455.6956</td>\n",
       "      <td>-999.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>48.15</td>\n",
       "      <td>-999.25</td>\n",
       "      <td>524.0410</td>\n",
       "      <td>-999.25</td>\n",
       "      <td>3820311.75</td>\n",
       "      <td>-455.6956</td>\n",
       "      <td>-999.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>48.30</td>\n",
       "      <td>-999.25</td>\n",
       "      <td>524.0336</td>\n",
       "      <td>-999.25</td>\n",
       "      <td>3820366.25</td>\n",
       "      <td>-455.6956</td>\n",
       "      <td>-999.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>48.45</td>\n",
       "      <td>-999.25</td>\n",
       "      <td>524.0262</td>\n",
       "      <td>-999.25</td>\n",
       "      <td>3820419.75</td>\n",
       "      <td>-455.6956</td>\n",
       "      <td>-999.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>48.60</td>\n",
       "      <td>-999.25</td>\n",
       "      <td>524.0190</td>\n",
       "      <td>-999.25</td>\n",
       "      <td>3820472.25</td>\n",
       "      <td>-455.6956</td>\n",
       "      <td>-999.25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    DEPTH    RHOB       DT      GR           AI   AI_rel     PHIE\n",
       "0   48.00 -999.25  524.0485 -999.25  3820257.00 -455.6956 -999.25\n",
       "1   48.15 -999.25  524.0410 -999.25  3820311.75 -455.6956 -999.25\n",
       "2   48.30 -999.25  524.0336 -999.25  3820366.25 -455.6956 -999.25\n",
       "3   48.45 -999.25  524.0262 -999.25  3820419.75 -455.6956 -999.25\n",
       "4   48.60 -999.25  524.0190 -999.25  3820472.25 -455.6956 -999.25"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====================================================================================================\n"
     ]
    }
   ],
   "source": [
    "display('head : ',df.head())\n",
    "print(\"=\" * 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "00c3aad1",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Tail : '"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<bound method NDFrame.tail of           DEPTH       RHOB       DT        GR           AI      AI_rel   \\\n",
       "0       48.0000  -999.2500  524.0485 -999.2500  3820257.00    -455.6956   \n",
       "1       48.1500  -999.2500  524.0410 -999.2500  3820311.75    -455.6956   \n",
       "2       48.3000  -999.2500  524.0336 -999.2500  3820366.25    -455.6956   \n",
       "3       48.4500  -999.2500  524.0262 -999.2500  3820419.75    -455.6956   \n",
       "4       48.6000  -999.2500  524.0190 -999.2500  3820472.25    -455.6956   \n",
       "...         ...        ...       ...       ...         ...          ...   \n",
       "9675  1499.2500  1787.5444  532.1727   27.6273  3359011.00 -239115.9375   \n",
       "9676  1499.4000  1814.1691  534.8610   28.5281  3391772.00 -239115.9375   \n",
       "9677  1499.5500  1861.6497  537.1902   28.5813  3465524.00 -239115.9375   \n",
       "9678  1499.7001  1880.3978  537.2630   28.5813  3499957.75 -239115.9375   \n",
       "9679  1499.8501  1856.3350  537.3831   27.9759  3454404.00 -212640.7031   \n",
       "\n",
       "        PHIE  \n",
       "0    -999.25  \n",
       "1    -999.25  \n",
       "2    -999.25  \n",
       "3    -999.25  \n",
       "4    -999.25  \n",
       "...      ...  \n",
       "9675 -999.25  \n",
       "9676 -999.25  \n",
       "9677 -999.25  \n",
       "9678 -999.25  \n",
       "9679 -999.25  \n",
       "\n",
       "[9680 rows x 7 columns]>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====================================================================================================\n"
     ]
    }
   ],
   "source": [
    "display('Tail : ',df.tail)\n",
    "print(\"=\" * 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "71f8a2ef",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DEPTH</th>\n",
       "      <th>RHOB</th>\n",
       "      <th>DT</th>\n",
       "      <th>GR</th>\n",
       "      <th>AI</th>\n",
       "      <th>AI_rel</th>\n",
       "      <th>PHIE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9675</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9676</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9677</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9678</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9679</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9680 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       DEPTH   RHOB    DT     GR      AI   AI_rel    PHIE\n",
       "0      False  False  False  False  False     False  False\n",
       "1      False  False  False  False  False     False  False\n",
       "2      False  False  False  False  False     False  False\n",
       "3      False  False  False  False  False     False  False\n",
       "4      False  False  False  False  False     False  False\n",
       "...      ...    ...    ...    ...    ...       ...    ...\n",
       "9675   False  False  False  False  False     False  False\n",
       "9676   False  False  False  False  False     False  False\n",
       "9677   False  False  False  False  False     False  False\n",
       "9678   False  False  False  False  False     False  False\n",
       "9679   False  False  False  False  False     False  False\n",
       "\n",
       "[9680 rows x 7 columns]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "210e4220",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       " DEPTH      0\n",
       " RHOB       0\n",
       " DT         0\n",
       " GR         0\n",
       " AI         0\n",
       " AI_rel     0\n",
       " PHIE       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "3aecc3fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "# i can not count nan values in percent %%%%??????\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "2bf6bfae",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<AxesSubplot:title={'center':' DEPTH'}>,\n",
       "        <AxesSubplot:title={'center':' RHOB'}>,\n",
       "        <AxesSubplot:title={'center':' DT '}>],\n",
       "       [<AxesSubplot:title={'center':' GR '}>,\n",
       "        <AxesSubplot:title={'center':' AI'}>,\n",
       "        <AxesSubplot:title={'center':' AI_rel '}>],\n",
       "       [<AxesSubplot:title={'center':' PHIE'}>, <AxesSubplot:>,\n",
       "        <AxesSubplot:>]], dtype=object)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "df.hist(figsize=(20,10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "273167dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "eec02686",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'DT'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Input \u001b[1;32mIn [49]\u001b[0m, in \u001b[0;36m<cell line: 3>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m plt\u001b[38;5;241m.\u001b[39mfigure(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m10\u001b[39m,\u001b[38;5;241m5\u001b[39m))\n\u001b[1;32m----> 3\u001b[0m plt\u001b[38;5;241m.\u001b[39mscatter(\u001b[43mdf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mDT\u001b[49m, df\u001b[38;5;241m.\u001b[39mRHOB)\n",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pandas\\core\\generic.py:5575\u001b[0m, in \u001b[0;36mNDFrame.__getattr__\u001b[1;34m(self, name)\u001b[0m\n\u001b[0;32m   5568\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m (\n\u001b[0;32m   5569\u001b[0m     name \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_internal_names_set\n\u001b[0;32m   5570\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m name \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_metadata\n\u001b[0;32m   5571\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m name \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_accessors\n\u001b[0;32m   5572\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_info_axis\u001b[38;5;241m.\u001b[39m_can_hold_identifiers_and_holds_name(name)\n\u001b[0;32m   5573\u001b[0m ):\n\u001b[0;32m   5574\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m[name]\n\u001b[1;32m-> 5575\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mobject\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[38;5;21;43m__getattribute__\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mname\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'DT'"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 720x360 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,5))\n",
    "\n",
    "plt.scatter(df.DT, df.RHOB)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
